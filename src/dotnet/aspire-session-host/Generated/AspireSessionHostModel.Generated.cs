//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Aspire.SessionHost.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:16</p>
  /// </summary>
  public class AspireSessionHostModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableMap<string, AspireHostModel> AspireHosts => _AspireHosts;
    
    //private fields
    [NotNull] private readonly RdMap<string, AspireHostModel> _AspireHosts;
    
    //primary constructor
    private AspireSessionHostModel(
      [NotNull] RdMap<string, AspireHostModel> aspireHosts
    )
    {
      if (aspireHosts == null) throw new ArgumentNullException("aspireHosts");
      
      _AspireHosts = aspireHosts;
      BindableChildren.Add(new KeyValuePair<string, object>("aspireHosts", _AspireHosts));
    }
    //secondary constructor
    private AspireSessionHostModel (
    ) : this (
      new RdMap<string, AspireHostModel>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, AspireHostModel.Read, AspireHostModel.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -2257813837946285985L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(AspireSessionHostRoot), AspireSessionHostRoot.RegisterDeclaredTypesSerializers);
    }
    
    public AspireSessionHostModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("AspireSessionHostModel"));
      this.BindTopLevel(lifetime, protocol, "AspireSessionHostModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspireSessionHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("aspireHosts = "); _AspireHosts.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:204</p>
  /// </summary>
  public sealed class AspireHostModel : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public AspireHostModelConfig Config {get; private set;}
    [NotNull] public IRdCall<CreateSessionRequest, CreateSessionResponse> CreateSession => _CreateSession;
    [NotNull] public IRdCall<DeleteSessionRequest, DeleteSessionResponse> DeleteSession => _DeleteSession;
    [NotNull] public ISource<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted> ProcessStarted => _ProcessStarted;
    [NotNull] public ISource<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated> ProcessTerminated => _ProcessTerminated;
    [NotNull] public ISource<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived> LogReceived => _LogReceived;
    [NotNull] public IViewableMap<string, ResourceWrapper> Resources => _Resources;
    
    //private fields
    [NotNull] private readonly RdCall<CreateSessionRequest, CreateSessionResponse> _CreateSession;
    [NotNull] private readonly RdCall<DeleteSessionRequest, DeleteSessionResponse> _DeleteSession;
    [NotNull] private readonly RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted> _ProcessStarted;
    [NotNull] private readonly RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated> _ProcessTerminated;
    [NotNull] private readonly RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived> _LogReceived;
    [NotNull] private readonly RdMap<string, ResourceWrapper> _Resources;
    
    //primary constructor
    private AspireHostModel(
      [NotNull] AspireHostModelConfig config,
      [NotNull] RdCall<CreateSessionRequest, CreateSessionResponse> createSession,
      [NotNull] RdCall<DeleteSessionRequest, DeleteSessionResponse> deleteSession,
      [NotNull] RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted> processStarted,
      [NotNull] RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated> processTerminated,
      [NotNull] RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived> logReceived,
      [NotNull] RdMap<string, ResourceWrapper> resources
    )
    {
      if (config == null) throw new ArgumentNullException("config");
      if (createSession == null) throw new ArgumentNullException("createSession");
      if (deleteSession == null) throw new ArgumentNullException("deleteSession");
      if (processStarted == null) throw new ArgumentNullException("processStarted");
      if (processTerminated == null) throw new ArgumentNullException("processTerminated");
      if (logReceived == null) throw new ArgumentNullException("logReceived");
      if (resources == null) throw new ArgumentNullException("resources");
      
      Config = config;
      _CreateSession = createSession;
      _DeleteSession = deleteSession;
      _ProcessStarted = processStarted;
      _ProcessTerminated = processTerminated;
      _LogReceived = logReceived;
      _Resources = resources;
      BindableChildren.Add(new KeyValuePair<string, object>("createSession", _CreateSession));
      BindableChildren.Add(new KeyValuePair<string, object>("deleteSession", _DeleteSession));
      BindableChildren.Add(new KeyValuePair<string, object>("processStarted", _ProcessStarted));
      BindableChildren.Add(new KeyValuePair<string, object>("processTerminated", _ProcessTerminated));
      BindableChildren.Add(new KeyValuePair<string, object>("logReceived", _LogReceived));
      BindableChildren.Add(new KeyValuePair<string, object>("resources", _Resources));
    }
    //secondary constructor
    public AspireHostModel (
      [NotNull] AspireHostModelConfig config
    ) : this (
      config,
      new RdCall<CreateSessionRequest, CreateSessionResponse>(CreateSessionRequest.Read, CreateSessionRequest.Write, CreateSessionResponse.Read, CreateSessionResponse.Write),
      new RdCall<DeleteSessionRequest, DeleteSessionResponse>(DeleteSessionRequest.Read, DeleteSessionRequest.Write, DeleteSessionResponse.Read, DeleteSessionResponse.Write),
      new RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted>(JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted.Read, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted.Write),
      new RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated>(JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated.Read, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated.Write),
      new RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived>(JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived.Read, JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived.Write),
      new RdMap<string, ResourceWrapper>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ResourceWrapper.Read, ResourceWrapper.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<AspireHostModel> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var config = AspireHostModelConfig.Read(ctx, reader);
      var createSession = RdCall<CreateSessionRequest, CreateSessionResponse>.Read(ctx, reader, CreateSessionRequest.Read, CreateSessionRequest.Write, CreateSessionResponse.Read, CreateSessionResponse.Write);
      var deleteSession = RdCall<DeleteSessionRequest, DeleteSessionResponse>.Read(ctx, reader, DeleteSessionRequest.Read, DeleteSessionRequest.Write, DeleteSessionResponse.Read, DeleteSessionResponse.Write);
      var processStarted = RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted>.Read(ctx, reader, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted.Read, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted.Write);
      var processTerminated = RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated>.Read(ctx, reader, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated.Read, JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated.Write);
      var logReceived = RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived>.Read(ctx, reader, JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived.Read, JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived.Write);
      var resources = RdMap<string, ResourceWrapper>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ResourceWrapper.Read, ResourceWrapper.Write);
      var _result = new AspireHostModel(config, createSession, deleteSession, processStarted, processTerminated, logReceived, resources).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<AspireHostModel> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      AspireHostModelConfig.Write(ctx, writer, value.Config);
      RdCall<CreateSessionRequest, CreateSessionResponse>.Write(ctx, writer, value._CreateSession);
      RdCall<DeleteSessionRequest, DeleteSessionResponse>.Write(ctx, writer, value._DeleteSession);
      RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessStarted>.Write(ctx, writer, value._ProcessStarted);
      RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.ProcessTerminated>.Write(ctx, writer, value._ProcessTerminated);
      RdSignal<JetBrains.Rider.Aspire.SessionHost.Generated.LogReceived>.Write(ctx, writer, value._LogReceived);
      RdMap<string, ResourceWrapper>.Write(ctx, writer, value._Resources);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspireHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("config = "); Config.PrintEx(printer); printer.Println();
        printer.Print("createSession = "); _CreateSession.PrintEx(printer); printer.Println();
        printer.Print("deleteSession = "); _DeleteSession.PrintEx(printer); printer.Println();
        printer.Print("processStarted = "); _ProcessStarted.PrintEx(printer); printer.Println();
        printer.Print("processTerminated = "); _ProcessTerminated.PrintEx(printer); printer.Println();
        printer.Print("logReceived = "); _LogReceived.PrintEx(printer); printer.Println();
        printer.Print("resources = "); _Resources.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:186</p>
  /// </summary>
  public sealed class AspireHostModelConfig : IPrintable, IEquatable<AspireHostModelConfig>
  {
    //fields
    //public fields
    
    /// <summary>
    /// Unique identifier for the Aspire Host, created from the `DCP_INSTANCE_ID_PREFIX` environment variable
    /// </summary>
    [NotNull] public string Id {get; private set;}
    
    /// <summary>
    /// Name of the started run configuration
    /// </summary>
    [CanBeNull] public string RunConfigName {get; private set;}
    
    /// <summary>
    /// Path of the Aspire Host .csproj file
    /// </summary>
    [NotNull] public string AspireHostProjectPath {get; private set;}
    
    /// <summary>
    /// `DOTNET_RESOURCE_SERVICE_ENDPOINT_URL` environment variable
    /// </summary>
    [CanBeNull] public string ResourceServiceEndpointUrl {get; private set;}
    
    /// <summary>
    /// `DOTNET_DASHBOARD_RESOURCESERVICE_APIKEY` environment variable
    /// </summary>
    [CanBeNull] public string ResourceServiceApiKey {get; private set;}
    
    /// <summary>
    /// Is Aspire Host running with debugger attached
    /// </summary>
    public bool IsDebuggingMode {get; private set;}
    
    /// <summary>
    /// URL of the Aspire Host dashboard
    /// </summary>
    [CanBeNull] public string AspireHostProjectUrl {get; private set;}
    
    //private fields
    //primary constructor
    public AspireHostModelConfig(
      [NotNull] string id,
      [CanBeNull] string runConfigName,
      [NotNull] string aspireHostProjectPath,
      [CanBeNull] string resourceServiceEndpointUrl,
      [CanBeNull] string resourceServiceApiKey,
      bool isDebuggingMode,
      [CanBeNull] string aspireHostProjectUrl
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (aspireHostProjectPath == null) throw new ArgumentNullException("aspireHostProjectPath");
      
      Id = id;
      RunConfigName = runConfigName;
      AspireHostProjectPath = aspireHostProjectPath;
      ResourceServiceEndpointUrl = resourceServiceEndpointUrl;
      ResourceServiceApiKey = resourceServiceApiKey;
      IsDebuggingMode = isDebuggingMode;
      AspireHostProjectUrl = aspireHostProjectUrl;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, [CanBeNull] out string runConfigName, [NotNull] out string aspireHostProjectPath, [CanBeNull] out string resourceServiceEndpointUrl, [CanBeNull] out string resourceServiceApiKey, out bool isDebuggingMode, [CanBeNull] out string aspireHostProjectUrl)
    {
      id = Id;
      runConfigName = RunConfigName;
      aspireHostProjectPath = AspireHostProjectPath;
      resourceServiceEndpointUrl = ResourceServiceEndpointUrl;
      resourceServiceApiKey = ResourceServiceApiKey;
      isDebuggingMode = IsDebuggingMode;
      aspireHostProjectUrl = AspireHostProjectUrl;
    }
    //statics
    
    public static CtxReadDelegate<AspireHostModelConfig> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var runConfigName = ReadStringNullable(ctx, reader);
      var aspireHostProjectPath = reader.ReadString();
      var resourceServiceEndpointUrl = ReadStringNullable(ctx, reader);
      var resourceServiceApiKey = ReadStringNullable(ctx, reader);
      var isDebuggingMode = reader.ReadBool();
      var aspireHostProjectUrl = ReadStringNullable(ctx, reader);
      var _result = new AspireHostModelConfig(id, runConfigName, aspireHostProjectPath, resourceServiceEndpointUrl, resourceServiceApiKey, isDebuggingMode, aspireHostProjectUrl);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<AspireHostModelConfig> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      WriteStringNullable(ctx, writer, value.RunConfigName);
      writer.Write(value.AspireHostProjectPath);
      WriteStringNullable(ctx, writer, value.ResourceServiceEndpointUrl);
      WriteStringNullable(ctx, writer, value.ResourceServiceApiKey);
      writer.Write(value.IsDebuggingMode);
      WriteStringNullable(ctx, writer, value.AspireHostProjectUrl);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((AspireHostModelConfig) obj);
    }
    public bool Equals(AspireHostModelConfig other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Equals(RunConfigName, other.RunConfigName) && AspireHostProjectPath == other.AspireHostProjectPath && Equals(ResourceServiceEndpointUrl, other.ResourceServiceEndpointUrl) && Equals(ResourceServiceApiKey, other.ResourceServiceApiKey) && IsDebuggingMode == other.IsDebuggingMode && Equals(AspireHostProjectUrl, other.AspireHostProjectUrl);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + (RunConfigName != null ? RunConfigName.GetHashCode() : 0);
        hash = hash * 31 + AspireHostProjectPath.GetHashCode();
        hash = hash * 31 + (ResourceServiceEndpointUrl != null ? ResourceServiceEndpointUrl.GetHashCode() : 0);
        hash = hash * 31 + (ResourceServiceApiKey != null ? ResourceServiceApiKey.GetHashCode() : 0);
        hash = hash * 31 + IsDebuggingMode.GetHashCode();
        hash = hash * 31 + (AspireHostProjectUrl != null ? AspireHostProjectUrl.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("AspireHostModelConfig (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("runConfigName = "); RunConfigName.PrintEx(printer); printer.Println();
        printer.Print("aspireHostProjectPath = "); AspireHostProjectPath.PrintEx(printer); printer.Println();
        printer.Print("resourceServiceEndpointUrl = "); ResourceServiceEndpointUrl.PrintEx(printer); printer.Println();
        printer.Print("resourceServiceApiKey = "); ResourceServiceApiKey.PrintEx(printer); printer.Println();
        printer.Print("isDebuggingMode = "); IsDebuggingMode.PrintEx(printer); printer.Println();
        printer.Print("aspireHostProjectUrl = "); AspireHostProjectUrl.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:38</p>
  /// </summary>
  public sealed class CreateSessionRequest : IPrintable, IEquatable<CreateSessionRequest>
  {
    //fields
    //public fields
    [NotNull] public string ProjectPath {get; private set;}
    public bool Debug {get; private set;}
    [CanBeNull] public string LaunchProfile {get; private set;}
    public bool DisableLaunchProfile {get; private set;}
    [CanBeNull] public string[] Args {get; private set;}
    [CanBeNull] public SessionEnvironmentVariable[] Envs {get; private set;}
    
    //private fields
    //primary constructor
    public CreateSessionRequest(
      [NotNull] string projectPath,
      bool debug,
      [CanBeNull] string launchProfile,
      bool disableLaunchProfile,
      [CanBeNull] string[] args,
      [CanBeNull] SessionEnvironmentVariable[] envs
    )
    {
      if (projectPath == null) throw new ArgumentNullException("projectPath");
      
      ProjectPath = projectPath;
      Debug = debug;
      LaunchProfile = launchProfile;
      DisableLaunchProfile = disableLaunchProfile;
      Args = args;
      Envs = envs;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectPath, out bool debug, [CanBeNull] out string launchProfile, out bool disableLaunchProfile, [CanBeNull] out string[] args, [CanBeNull] out SessionEnvironmentVariable[] envs)
    {
      projectPath = ProjectPath;
      debug = Debug;
      launchProfile = LaunchProfile;
      disableLaunchProfile = DisableLaunchProfile;
      args = Args;
      envs = Envs;
    }
    //statics
    
    public static CtxReadDelegate<CreateSessionRequest> Read = (ctx, reader) => 
    {
      var projectPath = reader.ReadString();
      var debug = reader.ReadBool();
      var launchProfile = ReadStringNullable(ctx, reader);
      var disableLaunchProfile = reader.ReadBool();
      var args = ReadStringArrayNullable(ctx, reader);
      var envs = ReadSessionEnvironmentVariableArrayNullable(ctx, reader);
      var _result = new CreateSessionRequest(projectPath, debug, launchProfile, disableLaunchProfile, args, envs);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArrayNullable = JetBrains.Rd.Impl.Serializers.ReadString.Array().NullableClass();
    public static CtxReadDelegate<SessionEnvironmentVariable[]> ReadSessionEnvironmentVariableArrayNullable = SessionEnvironmentVariable.Read.Array().NullableClass();
    
    public static CtxWriteDelegate<CreateSessionRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectPath);
      writer.Write(value.Debug);
      WriteStringNullable(ctx, writer, value.LaunchProfile);
      writer.Write(value.DisableLaunchProfile);
      WriteStringArrayNullable(ctx, writer, value.Args);
      WriteSessionEnvironmentVariableArrayNullable(ctx, writer, value.Envs);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArrayNullable = JetBrains.Rd.Impl.Serializers.WriteString.Array().NullableClass();
    public static  CtxWriteDelegate<SessionEnvironmentVariable[]> WriteSessionEnvironmentVariableArrayNullable = SessionEnvironmentVariable.Write.Array().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CreateSessionRequest) obj);
    }
    public bool Equals(CreateSessionRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectPath == other.ProjectPath && Debug == other.Debug && Equals(LaunchProfile, other.LaunchProfile) && DisableLaunchProfile == other.DisableLaunchProfile && Equals(Args, other.Args) && Equals(Envs, other.Envs);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectPath.GetHashCode();
        hash = hash * 31 + Debug.GetHashCode();
        hash = hash * 31 + (LaunchProfile != null ? LaunchProfile.GetHashCode() : 0);
        hash = hash * 31 + DisableLaunchProfile.GetHashCode();
        hash = hash * 31 + (Args != null ? Args.ContentHashCode() : 0);
        hash = hash * 31 + (Envs != null ? Envs.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CreateSessionRequest (");
      using (printer.IndentCookie()) {
        printer.Print("projectPath = "); ProjectPath.PrintEx(printer); printer.Println();
        printer.Print("debug = "); Debug.PrintEx(printer); printer.Println();
        printer.Print("launchProfile = "); LaunchProfile.PrintEx(printer); printer.Println();
        printer.Print("disableLaunchProfile = "); DisableLaunchProfile.PrintEx(printer); printer.Println();
        printer.Print("args = "); Args.PrintEx(printer); printer.Println();
        printer.Print("envs = "); Envs.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:47</p>
  /// </summary>
  public sealed class CreateSessionResponse : IPrintable, IEquatable<CreateSessionResponse>
  {
    //fields
    //public fields
    [CanBeNull] public string SessionId {get; private set;}
    [CanBeNull] public string Error {get; private set;}
    
    //private fields
    //primary constructor
    public CreateSessionResponse(
      [CanBeNull] string sessionId,
      [CanBeNull] string error
    )
    {
      SessionId = sessionId;
      Error = error;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out string sessionId, [CanBeNull] out string error)
    {
      sessionId = SessionId;
      error = Error;
    }
    //statics
    
    public static CtxReadDelegate<CreateSessionResponse> Read = (ctx, reader) => 
    {
      var sessionId = ReadStringNullable(ctx, reader);
      var error = ReadStringNullable(ctx, reader);
      var _result = new CreateSessionResponse(sessionId, error);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<CreateSessionResponse> Write = (ctx, writer, value) => 
    {
      WriteStringNullable(ctx, writer, value.SessionId);
      WriteStringNullable(ctx, writer, value.Error);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CreateSessionResponse) obj);
    }
    public bool Equals(CreateSessionResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(SessionId, other.SessionId) && Equals(Error, other.Error);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (SessionId != null ? SessionId.GetHashCode() : 0);
        hash = hash * 31 + (Error != null ? Error.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CreateSessionResponse (");
      using (printer.IndentCookie()) {
        printer.Print("sessionId = "); SessionId.PrintEx(printer); printer.Println();
        printer.Print("error = "); Error.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:52</p>
  /// </summary>
  public sealed class DeleteSessionRequest : IPrintable, IEquatable<DeleteSessionRequest>
  {
    //fields
    //public fields
    [NotNull] public string SessionId {get; private set;}
    
    //private fields
    //primary constructor
    public DeleteSessionRequest(
      [NotNull] string sessionId
    )
    {
      if (sessionId == null) throw new ArgumentNullException("sessionId");
      
      SessionId = sessionId;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string sessionId)
    {
      sessionId = SessionId;
    }
    //statics
    
    public static CtxReadDelegate<DeleteSessionRequest> Read = (ctx, reader) => 
    {
      var sessionId = reader.ReadString();
      var _result = new DeleteSessionRequest(sessionId);
      return _result;
    };
    
    public static CtxWriteDelegate<DeleteSessionRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.SessionId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DeleteSessionRequest) obj);
    }
    public bool Equals(DeleteSessionRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return SessionId == other.SessionId;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + SessionId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DeleteSessionRequest (");
      using (printer.IndentCookie()) {
        printer.Print("sessionId = "); SessionId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:56</p>
  /// </summary>
  public sealed class DeleteSessionResponse : IPrintable, IEquatable<DeleteSessionResponse>
  {
    //fields
    //public fields
    
    /// <summary>
    /// The field will be null if the session cannot be found
    /// </summary>
    [CanBeNull] public string SessionId {get; private set;}
    [CanBeNull] public string Error {get; private set;}
    
    //private fields
    //primary constructor
    public DeleteSessionResponse(
      [CanBeNull] string sessionId,
      [CanBeNull] string error
    )
    {
      SessionId = sessionId;
      Error = error;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out string sessionId, [CanBeNull] out string error)
    {
      sessionId = SessionId;
      error = Error;
    }
    //statics
    
    public static CtxReadDelegate<DeleteSessionResponse> Read = (ctx, reader) => 
    {
      var sessionId = ReadStringNullable(ctx, reader);
      var error = ReadStringNullable(ctx, reader);
      var _result = new DeleteSessionResponse(sessionId, error);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<DeleteSessionResponse> Write = (ctx, writer, value) => 
    {
      WriteStringNullable(ctx, writer, value.SessionId);
      WriteStringNullable(ctx, writer, value.Error);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DeleteSessionResponse) obj);
    }
    public bool Equals(DeleteSessionResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(SessionId, other.SessionId) && Equals(Error, other.Error);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (SessionId != null ? SessionId.GetHashCode() : 0);
        hash = hash * 31 + (Error != null ? Error.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DeleteSessionResponse (");
      using (printer.IndentCookie()) {
        printer.Print("sessionId = "); SessionId.PrintEx(printer); printer.Println();
        printer.Print("error = "); Error.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:27</p>
  /// </summary>
  public sealed class LogReceived : IPrintable, IEquatable<LogReceived>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public bool IsStdErr {get; private set;}
    [NotNull] public string Message {get; private set;}
    
    //private fields
    //primary constructor
    public LogReceived(
      [NotNull] string id,
      bool isStdErr,
      [NotNull] string message
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (message == null) throw new ArgumentNullException("message");
      
      Id = id;
      IsStdErr = isStdErr;
      Message = message;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out bool isStdErr, [NotNull] out string message)
    {
      id = Id;
      isStdErr = IsStdErr;
      message = Message;
    }
    //statics
    
    public static CtxReadDelegate<LogReceived> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var isStdErr = reader.ReadBool();
      var message = reader.ReadString();
      var _result = new LogReceived(id, isStdErr, message);
      return _result;
    };
    
    public static CtxWriteDelegate<LogReceived> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.IsStdErr);
      writer.Write(value.Message);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((LogReceived) obj);
    }
    public bool Equals(LogReceived other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && IsStdErr == other.IsStdErr && Message == other.Message;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + IsStdErr.GetHashCode();
        hash = hash * 31 + Message.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("LogReceived (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("isStdErr = "); IsStdErr.PrintEx(printer); printer.Println();
        printer.Print("message = "); Message.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:17</p>
  /// </summary>
  public sealed class ProcessStarted : IPrintable, IEquatable<ProcessStarted>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public long Pid {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessStarted(
      [NotNull] string id,
      long pid
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      Pid = pid;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out long pid)
    {
      id = Id;
      pid = Pid;
    }
    //statics
    
    public static CtxReadDelegate<ProcessStarted> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var pid = reader.ReadLong();
      var _result = new ProcessStarted(id, pid);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessStarted> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Pid);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessStarted) obj);
    }
    public bool Equals(ProcessStarted other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Pid == other.Pid;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Pid.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessStarted (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:22</p>
  /// </summary>
  public sealed class ProcessTerminated : IPrintable, IEquatable<ProcessTerminated>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public int ExitCode {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessTerminated(
      [NotNull] string id,
      int exitCode
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      ExitCode = exitCode;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out int exitCode)
    {
      id = Id;
      exitCode = ExitCode;
    }
    //statics
    
    public static CtxReadDelegate<ProcessTerminated> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var exitCode = reader.ReadInt();
      var _result = new ProcessTerminated(id, exitCode);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessTerminated> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.ExitCode);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessTerminated) obj);
    }
    public bool Equals(ProcessTerminated other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && ExitCode == other.ExitCode;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + ExitCode.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessTerminated (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("exitCode = "); ExitCode.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:145</p>
  /// </summary>
  public sealed class ResourceCommand : IPrintable, IEquatable<ResourceCommand>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [NotNull] public string DisplayName {get; private set;}
    [CanBeNull] public string ConfirmationMessage {get; private set;}
    public bool IsHighlighted {get; private set;}
    [CanBeNull] public string IconName {get; private set;}
    [CanBeNull] public string DisplayDescription {get; private set;}
    public ResourceCommandState State {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceCommand(
      [NotNull] string name,
      [NotNull] string displayName,
      [CanBeNull] string confirmationMessage,
      bool isHighlighted,
      [CanBeNull] string iconName,
      [CanBeNull] string displayDescription,
      ResourceCommandState state
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (displayName == null) throw new ArgumentNullException("displayName");
      
      Name = name;
      DisplayName = displayName;
      ConfirmationMessage = confirmationMessage;
      IsHighlighted = isHighlighted;
      IconName = iconName;
      DisplayDescription = displayDescription;
      State = state;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, [NotNull] out string displayName, [CanBeNull] out string confirmationMessage, out bool isHighlighted, [CanBeNull] out string iconName, [CanBeNull] out string displayDescription, out ResourceCommandState state)
    {
      name = Name;
      displayName = DisplayName;
      confirmationMessage = ConfirmationMessage;
      isHighlighted = IsHighlighted;
      iconName = IconName;
      displayDescription = DisplayDescription;
      state = State;
    }
    //statics
    
    public static CtxReadDelegate<ResourceCommand> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var displayName = reader.ReadString();
      var confirmationMessage = ReadStringNullable(ctx, reader);
      var isHighlighted = reader.ReadBool();
      var iconName = ReadStringNullable(ctx, reader);
      var displayDescription = ReadStringNullable(ctx, reader);
      var state = (ResourceCommandState)reader.ReadInt();
      var _result = new ResourceCommand(name, displayName, confirmationMessage, isHighlighted, iconName, displayDescription, state);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ResourceCommand> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.DisplayName);
      WriteStringNullable(ctx, writer, value.ConfirmationMessage);
      writer.Write(value.IsHighlighted);
      WriteStringNullable(ctx, writer, value.IconName);
      WriteStringNullable(ctx, writer, value.DisplayDescription);
      writer.Write((int)value.State);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceCommand) obj);
    }
    public bool Equals(ResourceCommand other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && DisplayName == other.DisplayName && Equals(ConfirmationMessage, other.ConfirmationMessage) && IsHighlighted == other.IsHighlighted && Equals(IconName, other.IconName) && Equals(DisplayDescription, other.DisplayDescription) && State == other.State;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + DisplayName.GetHashCode();
        hash = hash * 31 + (ConfirmationMessage != null ? ConfirmationMessage.GetHashCode() : 0);
        hash = hash * 31 + IsHighlighted.GetHashCode();
        hash = hash * 31 + (IconName != null ? IconName.GetHashCode() : 0);
        hash = hash * 31 + (DisplayDescription != null ? DisplayDescription.GetHashCode() : 0);
        hash = hash * 31 + (int) State;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceCommand (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("displayName = "); DisplayName.PrintEx(printer); printer.Println();
        printer.Print("confirmationMessage = "); ConfirmationMessage.PrintEx(printer); printer.Println();
        printer.Print("isHighlighted = "); IsHighlighted.PrintEx(printer); printer.Println();
        printer.Print("iconName = "); IconName.PrintEx(printer); printer.Println();
        printer.Print("displayDescription = "); DisplayDescription.PrintEx(printer); printer.Println();
        printer.Print("state = "); State.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:170</p>
  /// </summary>
  public sealed class ResourceCommandRequest : IPrintable, IEquatable<ResourceCommandRequest>
  {
    //fields
    //public fields
    [NotNull] public string CommandName {get; private set;}
    [NotNull] public string ResourceName {get; private set;}
    [NotNull] public string ResourceType {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceCommandRequest(
      [NotNull] string commandName,
      [NotNull] string resourceName,
      [NotNull] string resourceType
    )
    {
      if (commandName == null) throw new ArgumentNullException("commandName");
      if (resourceName == null) throw new ArgumentNullException("resourceName");
      if (resourceType == null) throw new ArgumentNullException("resourceType");
      
      CommandName = commandName;
      ResourceName = resourceName;
      ResourceType = resourceType;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string commandName, [NotNull] out string resourceName, [NotNull] out string resourceType)
    {
      commandName = CommandName;
      resourceName = ResourceName;
      resourceType = ResourceType;
    }
    //statics
    
    public static CtxReadDelegate<ResourceCommandRequest> Read = (ctx, reader) => 
    {
      var commandName = reader.ReadString();
      var resourceName = reader.ReadString();
      var resourceType = reader.ReadString();
      var _result = new ResourceCommandRequest(commandName, resourceName, resourceType);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceCommandRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CommandName);
      writer.Write(value.ResourceName);
      writer.Write(value.ResourceType);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceCommandRequest) obj);
    }
    public bool Equals(ResourceCommandRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return CommandName == other.CommandName && ResourceName == other.ResourceName && ResourceType == other.ResourceType;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + CommandName.GetHashCode();
        hash = hash * 31 + ResourceName.GetHashCode();
        hash = hash * 31 + ResourceType.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceCommandRequest (");
      using (printer.IndentCookie()) {
        printer.Print("commandName = "); CommandName.PrintEx(printer); printer.Println();
        printer.Print("resourceName = "); ResourceName.PrintEx(printer); printer.Println();
        printer.Print("resourceType = "); ResourceType.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:176</p>
  /// </summary>
  public sealed class ResourceCommandResponse : IPrintable, IEquatable<ResourceCommandResponse>
  {
    //fields
    //public fields
    public ResourceCommandResponseKind Kind {get; private set;}
    [CanBeNull] public string ErrorMessage {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceCommandResponse(
      ResourceCommandResponseKind kind,
      [CanBeNull] string errorMessage
    )
    {
      Kind = kind;
      ErrorMessage = errorMessage;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out ResourceCommandResponseKind kind, [CanBeNull] out string errorMessage)
    {
      kind = Kind;
      errorMessage = ErrorMessage;
    }
    //statics
    
    public static CtxReadDelegate<ResourceCommandResponse> Read = (ctx, reader) => 
    {
      var kind = (ResourceCommandResponseKind)reader.ReadInt();
      var errorMessage = ReadStringNullable(ctx, reader);
      var _result = new ResourceCommandResponse(kind, errorMessage);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ResourceCommandResponse> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.Kind);
      WriteStringNullable(ctx, writer, value.ErrorMessage);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceCommandResponse) obj);
    }
    public bool Equals(ResourceCommandResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Kind == other.Kind && Equals(ErrorMessage, other.ErrorMessage);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (int) Kind;
        hash = hash * 31 + (ErrorMessage != null ? ErrorMessage.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceCommandResponse (");
      using (printer.IndentCookie()) {
        printer.Print("kind = "); Kind.PrintEx(printer); printer.Println();
        printer.Print("errorMessage = "); ErrorMessage.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:177</p>
  /// </summary>
  public enum ResourceCommandResponseKind {
    Undefined,
    Succeeded,
    Failed,
    Canceled
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:152</p>
  /// </summary>
  public enum ResourceCommandState {
    Enabled,
    Disabled,
    Hidden
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:114</p>
  /// </summary>
  public sealed class ResourceEnvironmentVariable : IPrintable, IEquatable<ResourceEnvironmentVariable>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [CanBeNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceEnvironmentVariable(
      [NotNull] string key,
      [CanBeNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [CanBeNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<ResourceEnvironmentVariable> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = ReadStringNullable(ctx, reader);
      var _result = new ResourceEnvironmentVariable(key, value);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ResourceEnvironmentVariable> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      WriteStringNullable(ctx, writer, value.Value);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceEnvironmentVariable) obj);
    }
    public bool Equals(ResourceEnvironmentVariable other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Equals(Value, other.Value);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + (Value != null ? Value.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceEnvironmentVariable (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:138</p>
  /// </summary>
  public sealed class ResourceHealthReport : IPrintable, IEquatable<ResourceHealthReport>
  {
    //fields
    //public fields
    [CanBeNull] public ResourceHealthStatus? Status {get; private set;}
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Description {get; private set;}
    [NotNull] public string Exception {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceHealthReport(
      [CanBeNull] ResourceHealthStatus? status,
      [NotNull] string key,
      [NotNull] string description,
      [NotNull] string exception
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (description == null) throw new ArgumentNullException("description");
      if (exception == null) throw new ArgumentNullException("exception");
      
      Status = status;
      Key = key;
      Description = description;
      Exception = exception;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out ResourceHealthStatus? status, [NotNull] out string key, [NotNull] out string description, [NotNull] out string exception)
    {
      status = Status;
      key = Key;
      description = Description;
      exception = Exception;
    }
    //statics
    
    public static CtxReadDelegate<ResourceHealthReport> Read = (ctx, reader) => 
    {
      var status = ReadResourceHealthStatusNullable(ctx, reader);
      var key = reader.ReadString();
      var description = reader.ReadString();
      var exception = reader.ReadString();
      var _result = new ResourceHealthReport(status, key, description, exception);
      return _result;
    };
    public static CtxReadDelegate<ResourceHealthStatus?> ReadResourceHealthStatusNullable = new CtxReadDelegate<ResourceHealthStatus>(JetBrains.Rd.Impl.Serializers.ReadEnum<ResourceHealthStatus>).NullableStruct();
    
    public static CtxWriteDelegate<ResourceHealthReport> Write = (ctx, writer, value) => 
    {
      WriteResourceHealthStatusNullable(ctx, writer, value.Status);
      writer.Write(value.Key);
      writer.Write(value.Description);
      writer.Write(value.Exception);
    };
    public static  CtxWriteDelegate<ResourceHealthStatus?> WriteResourceHealthStatusNullable = new CtxWriteDelegate<ResourceHealthStatus>(JetBrains.Rd.Impl.Serializers.WriteEnum<ResourceHealthStatus>).NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceHealthReport) obj);
    }
    public bool Equals(ResourceHealthReport other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Status, other.Status) && Key == other.Key && Description == other.Description && Exception == other.Exception;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (Status != null ? (int) Status : 0);
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + Exception.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceHealthReport (");
      using (printer.IndentCookie()) {
        printer.Print("status = "); Status.PrintEx(printer); printer.Println();
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("exception = "); Exception.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:132</p>
  /// </summary>
  public enum ResourceHealthStatus {
    Healthy,
    Unhealthy,
    Degraded
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:164</p>
  /// </summary>
  public sealed class ResourceLog : IPrintable, IEquatable<ResourceLog>
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    public bool IsError {get; private set;}
    public int LineNumber {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceLog(
      [NotNull] string text,
      bool isError,
      int lineNumber
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
      IsError = isError;
      LineNumber = lineNumber;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string text, out bool isError, out int lineNumber)
    {
      text = Text;
      isError = IsError;
      lineNumber = LineNumber;
    }
    //statics
    
    public static CtxReadDelegate<ResourceLog> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var isError = reader.ReadBool();
      var lineNumber = reader.ReadInt();
      var _result = new ResourceLog(text, isError, lineNumber);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceLog> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
      writer.Write(value.IsError);
      writer.Write(value.LineNumber);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceLog) obj);
    }
    public bool Equals(ResourceLog other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text && IsError == other.IsError && LineNumber == other.LineNumber;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        hash = hash * 31 + IsError.GetHashCode();
        hash = hash * 31 + LineNumber.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceLog (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
        printer.Print("isError = "); IsError.PrintEx(printer); printer.Println();
        printer.Print("lineNumber = "); LineNumber.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:69</p>
  /// </summary>
  public sealed class ResourceModel : IPrintable, IEquatable<ResourceModel>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public ResourceType Type {get; private set;}
    [NotNull] public string DisplayName {get; private set;}
    [NotNull] public string Uid {get; private set;}
    [CanBeNull] public ResourceState? State {get; private set;}
    [CanBeNull] public ResourceStateStyle? StateStyle {get; private set;}
    [CanBeNull] public DateTime? CreatedAt {get; private set;}
    [CanBeNull] public DateTime? StartedAt {get; private set;}
    [CanBeNull] public DateTime? StoppedAt {get; private set;}
    [NotNull] public ResourceProperty[] Properties {get; private set;}
    [NotNull] public ResourceEnvironmentVariable[] Environment {get; private set;}
    [NotNull] public ResourceUrl[] Urls {get; private set;}
    [NotNull] public ResourceVolume[] Volumes {get; private set;}
    [NotNull] public ResourceHealthReport[] HealthReports {get; private set;}
    [NotNull] public ResourceCommand[] Commands {get; private set;}
    [NotNull] public ResourceRelationship[] Relationships {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceModel(
      [NotNull] string name,
      ResourceType type,
      [NotNull] string displayName,
      [NotNull] string uid,
      [CanBeNull] ResourceState? state,
      [CanBeNull] ResourceStateStyle? stateStyle,
      [CanBeNull] DateTime? createdAt,
      [CanBeNull] DateTime? startedAt,
      [CanBeNull] DateTime? stoppedAt,
      [NotNull] ResourceProperty[] properties,
      [NotNull] ResourceEnvironmentVariable[] environment,
      [NotNull] ResourceUrl[] urls,
      [NotNull] ResourceVolume[] volumes,
      [NotNull] ResourceHealthReport[] healthReports,
      [NotNull] ResourceCommand[] commands,
      [NotNull] ResourceRelationship[] relationships
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (displayName == null) throw new ArgumentNullException("displayName");
      if (uid == null) throw new ArgumentNullException("uid");
      if (properties == null) throw new ArgumentNullException("properties");
      if (environment == null) throw new ArgumentNullException("environment");
      if (urls == null) throw new ArgumentNullException("urls");
      if (volumes == null) throw new ArgumentNullException("volumes");
      if (healthReports == null) throw new ArgumentNullException("healthReports");
      if (commands == null) throw new ArgumentNullException("commands");
      if (relationships == null) throw new ArgumentNullException("relationships");
      
      Name = name;
      Type = type;
      DisplayName = displayName;
      Uid = uid;
      State = state;
      StateStyle = stateStyle;
      CreatedAt = createdAt;
      StartedAt = startedAt;
      StoppedAt = stoppedAt;
      Properties = properties;
      Environment = environment;
      Urls = urls;
      Volumes = volumes;
      HealthReports = healthReports;
      Commands = commands;
      Relationships = relationships;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out ResourceType type, [NotNull] out string displayName, [NotNull] out string uid, [CanBeNull] out ResourceState? state, [CanBeNull] out ResourceStateStyle? stateStyle, [CanBeNull] out DateTime? createdAt, [CanBeNull] out DateTime? startedAt, [CanBeNull] out DateTime? stoppedAt, [NotNull] out ResourceProperty[] properties, [NotNull] out ResourceEnvironmentVariable[] environment, [NotNull] out ResourceUrl[] urls, [NotNull] out ResourceVolume[] volumes, [NotNull] out ResourceHealthReport[] healthReports, [NotNull] out ResourceCommand[] commands, [NotNull] out ResourceRelationship[] relationships)
    {
      name = Name;
      type = Type;
      displayName = DisplayName;
      uid = Uid;
      state = State;
      stateStyle = StateStyle;
      createdAt = CreatedAt;
      startedAt = StartedAt;
      stoppedAt = StoppedAt;
      properties = Properties;
      environment = Environment;
      urls = Urls;
      volumes = Volumes;
      healthReports = HealthReports;
      commands = Commands;
      relationships = Relationships;
    }
    //statics
    
    public static CtxReadDelegate<ResourceModel> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var type = (ResourceType)reader.ReadInt();
      var displayName = reader.ReadString();
      var uid = reader.ReadString();
      var state = ReadResourceStateNullable(ctx, reader);
      var stateStyle = ReadResourceStateStyleNullable(ctx, reader);
      var createdAt = ReadDateTimeNullable(ctx, reader);
      var startedAt = ReadDateTimeNullable(ctx, reader);
      var stoppedAt = ReadDateTimeNullable(ctx, reader);
      var properties = ReadResourcePropertyArray(ctx, reader);
      var environment = ReadResourceEnvironmentVariableArray(ctx, reader);
      var urls = ReadResourceUrlArray(ctx, reader);
      var volumes = ReadResourceVolumeArray(ctx, reader);
      var healthReports = ReadResourceHealthReportArray(ctx, reader);
      var commands = ReadResourceCommandArray(ctx, reader);
      var relationships = ReadResourceRelationshipArray(ctx, reader);
      var _result = new ResourceModel(name, type, displayName, uid, state, stateStyle, createdAt, startedAt, stoppedAt, properties, environment, urls, volumes, healthReports, commands, relationships);
      return _result;
    };
    public static CtxReadDelegate<ResourceState?> ReadResourceStateNullable = new CtxReadDelegate<ResourceState>(JetBrains.Rd.Impl.Serializers.ReadEnum<ResourceState>).NullableStruct();
    public static CtxReadDelegate<ResourceStateStyle?> ReadResourceStateStyleNullable = new CtxReadDelegate<ResourceStateStyle>(JetBrains.Rd.Impl.Serializers.ReadEnum<ResourceStateStyle>).NullableStruct();
    public static CtxReadDelegate<DateTime?> ReadDateTimeNullable = JetBrains.Rd.Impl.Serializers.ReadDateTime.NullableStruct();
    public static CtxReadDelegate<ResourceProperty[]> ReadResourcePropertyArray = ResourceProperty.Read.Array();
    public static CtxReadDelegate<ResourceEnvironmentVariable[]> ReadResourceEnvironmentVariableArray = ResourceEnvironmentVariable.Read.Array();
    public static CtxReadDelegate<ResourceUrl[]> ReadResourceUrlArray = ResourceUrl.Read.Array();
    public static CtxReadDelegate<ResourceVolume[]> ReadResourceVolumeArray = ResourceVolume.Read.Array();
    public static CtxReadDelegate<ResourceHealthReport[]> ReadResourceHealthReportArray = ResourceHealthReport.Read.Array();
    public static CtxReadDelegate<ResourceCommand[]> ReadResourceCommandArray = ResourceCommand.Read.Array();
    public static CtxReadDelegate<ResourceRelationship[]> ReadResourceRelationshipArray = ResourceRelationship.Read.Array();
    
    public static CtxWriteDelegate<ResourceModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write((int)value.Type);
      writer.Write(value.DisplayName);
      writer.Write(value.Uid);
      WriteResourceStateNullable(ctx, writer, value.State);
      WriteResourceStateStyleNullable(ctx, writer, value.StateStyle);
      WriteDateTimeNullable(ctx, writer, value.CreatedAt);
      WriteDateTimeNullable(ctx, writer, value.StartedAt);
      WriteDateTimeNullable(ctx, writer, value.StoppedAt);
      WriteResourcePropertyArray(ctx, writer, value.Properties);
      WriteResourceEnvironmentVariableArray(ctx, writer, value.Environment);
      WriteResourceUrlArray(ctx, writer, value.Urls);
      WriteResourceVolumeArray(ctx, writer, value.Volumes);
      WriteResourceHealthReportArray(ctx, writer, value.HealthReports);
      WriteResourceCommandArray(ctx, writer, value.Commands);
      WriteResourceRelationshipArray(ctx, writer, value.Relationships);
    };
    public static  CtxWriteDelegate<ResourceState?> WriteResourceStateNullable = new CtxWriteDelegate<ResourceState>(JetBrains.Rd.Impl.Serializers.WriteEnum<ResourceState>).NullableStruct();
    public static  CtxWriteDelegate<ResourceStateStyle?> WriteResourceStateStyleNullable = new CtxWriteDelegate<ResourceStateStyle>(JetBrains.Rd.Impl.Serializers.WriteEnum<ResourceStateStyle>).NullableStruct();
    public static  CtxWriteDelegate<DateTime?> WriteDateTimeNullable = JetBrains.Rd.Impl.Serializers.WriteDateTime.NullableStruct();
    public static  CtxWriteDelegate<ResourceProperty[]> WriteResourcePropertyArray = ResourceProperty.Write.Array();
    public static  CtxWriteDelegate<ResourceEnvironmentVariable[]> WriteResourceEnvironmentVariableArray = ResourceEnvironmentVariable.Write.Array();
    public static  CtxWriteDelegate<ResourceUrl[]> WriteResourceUrlArray = ResourceUrl.Write.Array();
    public static  CtxWriteDelegate<ResourceVolume[]> WriteResourceVolumeArray = ResourceVolume.Write.Array();
    public static  CtxWriteDelegate<ResourceHealthReport[]> WriteResourceHealthReportArray = ResourceHealthReport.Write.Array();
    public static  CtxWriteDelegate<ResourceCommand[]> WriteResourceCommandArray = ResourceCommand.Write.Array();
    public static  CtxWriteDelegate<ResourceRelationship[]> WriteResourceRelationshipArray = ResourceRelationship.Write.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceModel) obj);
    }
    public bool Equals(ResourceModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Type == other.Type && DisplayName == other.DisplayName && Uid == other.Uid && Equals(State, other.State) && Equals(StateStyle, other.StateStyle) && Equals(CreatedAt, other.CreatedAt) && Equals(StartedAt, other.StartedAt) && Equals(StoppedAt, other.StoppedAt) && Properties.SequenceEqual(other.Properties) && Environment.SequenceEqual(other.Environment) && Urls.SequenceEqual(other.Urls) && Volumes.SequenceEqual(other.Volumes) && HealthReports.SequenceEqual(other.HealthReports) && Commands.SequenceEqual(other.Commands) && Relationships.SequenceEqual(other.Relationships);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (int) Type;
        hash = hash * 31 + DisplayName.GetHashCode();
        hash = hash * 31 + Uid.GetHashCode();
        hash = hash * 31 + (State != null ? (int) State : 0);
        hash = hash * 31 + (StateStyle != null ? (int) StateStyle : 0);
        hash = hash * 31 + (CreatedAt != null ? CreatedAt.GetHashCode() : 0);
        hash = hash * 31 + (StartedAt != null ? StartedAt.GetHashCode() : 0);
        hash = hash * 31 + (StoppedAt != null ? StoppedAt.GetHashCode() : 0);
        hash = hash * 31 + Properties.ContentHashCode();
        hash = hash * 31 + Environment.ContentHashCode();
        hash = hash * 31 + Urls.ContentHashCode();
        hash = hash * 31 + Volumes.ContentHashCode();
        hash = hash * 31 + HealthReports.ContentHashCode();
        hash = hash * 31 + Commands.ContentHashCode();
        hash = hash * 31 + Relationships.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceModel (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("displayName = "); DisplayName.PrintEx(printer); printer.Println();
        printer.Print("uid = "); Uid.PrintEx(printer); printer.Println();
        printer.Print("state = "); State.PrintEx(printer); printer.Println();
        printer.Print("stateStyle = "); StateStyle.PrintEx(printer); printer.Println();
        printer.Print("createdAt = "); CreatedAt.PrintEx(printer); printer.Println();
        printer.Print("startedAt = "); StartedAt.PrintEx(printer); printer.Println();
        printer.Print("stoppedAt = "); StoppedAt.PrintEx(printer); printer.Println();
        printer.Print("properties = "); Properties.PrintEx(printer); printer.Println();
        printer.Print("environment = "); Environment.PrintEx(printer); printer.Println();
        printer.Print("urls = "); Urls.PrintEx(printer); printer.Println();
        printer.Print("volumes = "); Volumes.PrintEx(printer); printer.Println();
        printer.Print("healthReports = "); HealthReports.PrintEx(printer); printer.Println();
        printer.Print("commands = "); Commands.PrintEx(printer); printer.Println();
        printer.Print("relationships = "); Relationships.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:107</p>
  /// </summary>
  public sealed class ResourceProperty : IPrintable, IEquatable<ResourceProperty>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [CanBeNull] public string DisplayName {get; private set;}
    [CanBeNull] public string Value {get; private set;}
    [CanBeNull] public bool? IsSensitive {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceProperty(
      [NotNull] string name,
      [CanBeNull] string displayName,
      [CanBeNull] string value,
      [CanBeNull] bool? isSensitive
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      DisplayName = displayName;
      Value = value;
      IsSensitive = isSensitive;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, [CanBeNull] out string displayName, [CanBeNull] out string value, [CanBeNull] out bool? isSensitive)
    {
      name = Name;
      displayName = DisplayName;
      value = Value;
      isSensitive = IsSensitive;
    }
    //statics
    
    public static CtxReadDelegate<ResourceProperty> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var displayName = ReadStringNullable(ctx, reader);
      var value = ReadStringNullable(ctx, reader);
      var isSensitive = ReadBoolNullable(ctx, reader);
      var _result = new ResourceProperty(name, displayName, value, isSensitive);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<bool?> ReadBoolNullable = JetBrains.Rd.Impl.Serializers.ReadBool.NullableStruct();
    
    public static CtxWriteDelegate<ResourceProperty> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.DisplayName);
      WriteStringNullable(ctx, writer, value.Value);
      WriteBoolNullable(ctx, writer, value.IsSensitive);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<bool?> WriteBoolNullable = JetBrains.Rd.Impl.Serializers.WriteBool.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceProperty) obj);
    }
    public bool Equals(ResourceProperty other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Equals(DisplayName, other.DisplayName) && Equals(Value, other.Value) && Equals(IsSensitive, other.IsSensitive);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (DisplayName != null ? DisplayName.GetHashCode() : 0);
        hash = hash * 31 + (Value != null ? Value.GetHashCode() : 0);
        hash = hash * 31 + (IsSensitive != null ? IsSensitive.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceProperty (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("displayName = "); DisplayName.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
        printer.Print("isSensitive = "); IsSensitive.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:159</p>
  /// </summary>
  public sealed class ResourceRelationship : IPrintable, IEquatable<ResourceRelationship>
  {
    //fields
    //public fields
    [NotNull] public string ResourceName {get; private set;}
    [NotNull] public string Type {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceRelationship(
      [NotNull] string resourceName,
      [NotNull] string type
    )
    {
      if (resourceName == null) throw new ArgumentNullException("resourceName");
      if (type == null) throw new ArgumentNullException("type");
      
      ResourceName = resourceName;
      Type = type;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string resourceName, [NotNull] out string type)
    {
      resourceName = ResourceName;
      type = Type;
    }
    //statics
    
    public static CtxReadDelegate<ResourceRelationship> Read = (ctx, reader) => 
    {
      var resourceName = reader.ReadString();
      var type = reader.ReadString();
      var _result = new ResourceRelationship(resourceName, type);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceRelationship> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ResourceName);
      writer.Write(value.Type);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceRelationship) obj);
    }
    public bool Equals(ResourceRelationship other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ResourceName == other.ResourceName && Type == other.Type;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ResourceName.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceRelationship (");
      using (printer.IndentCookie()) {
        printer.Print("resourceName = "); ResourceName.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:79</p>
  /// </summary>
  public enum ResourceState {
    Finished,
    Exited,
    FailedToStart,
    Starting,
    Running,
    Hidden,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:88</p>
  /// </summary>
  public enum ResourceStateStyle {
    Success,
    Info,
    Warning,
    Error,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:71</p>
  /// </summary>
  public enum ResourceType {
    Project,
    Container,
    Executable,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:119</p>
  /// </summary>
  public sealed class ResourceUrl : IPrintable, IEquatable<ResourceUrl>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [NotNull] public string FullUrl {get; private set;}
    public bool IsInternal {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceUrl(
      [NotNull] string name,
      [NotNull] string fullUrl,
      bool isInternal
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (fullUrl == null) throw new ArgumentNullException("fullUrl");
      
      Name = name;
      FullUrl = fullUrl;
      IsInternal = isInternal;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, [NotNull] out string fullUrl, out bool isInternal)
    {
      name = Name;
      fullUrl = FullUrl;
      isInternal = IsInternal;
    }
    //statics
    
    public static CtxReadDelegate<ResourceUrl> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var fullUrl = reader.ReadString();
      var isInternal = reader.ReadBool();
      var _result = new ResourceUrl(name, fullUrl, isInternal);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceUrl> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.FullUrl);
      writer.Write(value.IsInternal);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceUrl) obj);
    }
    public bool Equals(ResourceUrl other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && FullUrl == other.FullUrl && IsInternal == other.IsInternal;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + FullUrl.GetHashCode();
        hash = hash * 31 + IsInternal.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceUrl (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("fullUrl = "); FullUrl.PrintEx(printer); printer.Println();
        printer.Print("isInternal = "); IsInternal.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:125</p>
  /// </summary>
  public sealed class ResourceVolume : IPrintable, IEquatable<ResourceVolume>
  {
    //fields
    //public fields
    [NotNull] public string Source {get; private set;}
    [NotNull] public string Target {get; private set;}
    [NotNull] public string MountType {get; private set;}
    public bool IsReadOnly {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceVolume(
      [NotNull] string source,
      [NotNull] string target,
      [NotNull] string mountType,
      bool isReadOnly
    )
    {
      if (source == null) throw new ArgumentNullException("source");
      if (target == null) throw new ArgumentNullException("target");
      if (mountType == null) throw new ArgumentNullException("mountType");
      
      Source = source;
      Target = target;
      MountType = mountType;
      IsReadOnly = isReadOnly;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string source, [NotNull] out string target, [NotNull] out string mountType, out bool isReadOnly)
    {
      source = Source;
      target = Target;
      mountType = MountType;
      isReadOnly = IsReadOnly;
    }
    //statics
    
    public static CtxReadDelegate<ResourceVolume> Read = (ctx, reader) => 
    {
      var source = reader.ReadString();
      var target = reader.ReadString();
      var mountType = reader.ReadString();
      var isReadOnly = reader.ReadBool();
      var _result = new ResourceVolume(source, target, mountType, isReadOnly);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceVolume> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Source);
      writer.Write(value.Target);
      writer.Write(value.MountType);
      writer.Write(value.IsReadOnly);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceVolume) obj);
    }
    public bool Equals(ResourceVolume other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Source == other.Source && Target == other.Target && MountType == other.MountType && IsReadOnly == other.IsReadOnly;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Source.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + MountType.GetHashCode();
        hash = hash * 31 + IsReadOnly.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceVolume (");
      using (printer.IndentCookie()) {
        printer.Print("source = "); Source.PrintEx(printer); printer.Println();
        printer.Print("target = "); Target.PrintEx(printer); printer.Println();
        printer.Print("mountType = "); MountType.PrintEx(printer); printer.Println();
        printer.Print("isReadOnly = "); IsReadOnly.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:62</p>
  /// </summary>
  public sealed class ResourceWrapper : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<ResourceModel> Model => _Model;
    [NotNull] public IViewableProperty<bool> IsInitialized => _IsInitialized;
    [NotNull] public void LogReceived(ResourceLog value) => _LogReceived.Fire(value);
    [NotNull] public IRdEndpoint<ResourceCommandRequest, ResourceCommandResponse> ExecuteCommand => _ExecuteCommand;
    
    //private fields
    [NotNull] private readonly RdProperty<ResourceModel> _Model;
    [NotNull] private readonly RdProperty<bool> _IsInitialized;
    [NotNull] private readonly RdSignal<ResourceLog> _LogReceived;
    [NotNull] private readonly RdCall<ResourceCommandRequest, ResourceCommandResponse> _ExecuteCommand;
    
    //primary constructor
    private ResourceWrapper(
      [NotNull] RdProperty<ResourceModel> model,
      [NotNull] RdProperty<bool> isInitialized,
      [NotNull] RdSignal<ResourceLog> logReceived,
      [NotNull] RdCall<ResourceCommandRequest, ResourceCommandResponse> executeCommand
    )
    {
      if (model == null) throw new ArgumentNullException("model");
      if (isInitialized == null) throw new ArgumentNullException("isInitialized");
      if (logReceived == null) throw new ArgumentNullException("logReceived");
      if (executeCommand == null) throw new ArgumentNullException("executeCommand");
      
      _Model = model;
      _IsInitialized = isInitialized;
      _LogReceived = logReceived;
      _ExecuteCommand = executeCommand;
      _Model.OptimizeNested = true;
      _IsInitialized.OptimizeNested = true;
      _IsInitialized.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("model", _Model));
      BindableChildren.Add(new KeyValuePair<string, object>("isInitialized", _IsInitialized));
      BindableChildren.Add(new KeyValuePair<string, object>("logReceived", _LogReceived));
      BindableChildren.Add(new KeyValuePair<string, object>("executeCommand", _ExecuteCommand));
    }
    //secondary constructor
    public ResourceWrapper (
    ) : this (
      new RdProperty<ResourceModel>(ResourceModel.Read, ResourceModel.Write),
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool),
      new RdSignal<ResourceLog>(ResourceLog.Read, ResourceLog.Write),
      new RdCall<ResourceCommandRequest, ResourceCommandResponse>(ResourceCommandRequest.Read, ResourceCommandRequest.Write, ResourceCommandResponse.Read, ResourceCommandResponse.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ResourceWrapper> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var model = RdProperty<ResourceModel>.Read(ctx, reader, ResourceModel.Read, ResourceModel.Write);
      var isInitialized = RdProperty<bool>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool);
      var logReceived = RdSignal<ResourceLog>.Read(ctx, reader, ResourceLog.Read, ResourceLog.Write);
      var executeCommand = RdCall<ResourceCommandRequest, ResourceCommandResponse>.Read(ctx, reader, ResourceCommandRequest.Read, ResourceCommandRequest.Write, ResourceCommandResponse.Read, ResourceCommandResponse.Write);
      var _result = new ResourceWrapper(model, isInitialized, logReceived, executeCommand).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceWrapper> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<ResourceModel>.Write(ctx, writer, value._Model);
      RdProperty<bool>.Write(ctx, writer, value._IsInitialized);
      RdSignal<ResourceLog>.Write(ctx, writer, value._LogReceived);
      RdCall<ResourceCommandRequest, ResourceCommandResponse>.Write(ctx, writer, value._ExecuteCommand);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceWrapper (");
      using (printer.IndentCookie()) {
        printer.Print("model = "); _Model.PrintEx(printer); printer.Println();
        printer.Print("isInitialized = "); _IsInitialized.PrintEx(printer); printer.Println();
        printer.Print("logReceived = "); _LogReceived.PrintEx(printer); printer.Println();
        printer.Print("executeCommand = "); _ExecuteCommand.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:33</p>
  /// </summary>
  public sealed class SessionEnvironmentVariable : IPrintable, IEquatable<SessionEnvironmentVariable>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public SessionEnvironmentVariable(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<SessionEnvironmentVariable> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new SessionEnvironmentVariable(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<SessionEnvironmentVariable> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionEnvironmentVariable) obj);
    }
    public bool Equals(SessionEnvironmentVariable other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionEnvironmentVariable (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
