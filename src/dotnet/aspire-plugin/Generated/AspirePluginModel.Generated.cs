//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Aspire.Plugin.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:10</p>
  /// </summary>
  public class AspirePluginModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<string, string> GetProjectOutputType => _GetProjectOutputType;
    [NotNull] public IRdEndpoint<ReferenceProjectsFromAppHostRequest, ReferenceProjectsFromAppHostResponse> ReferenceProjectsFromAppHost => _ReferenceProjectsFromAppHost;
    [NotNull] public IRdEndpoint<ReferenceServiceDefaultsFromProjectsRequest, ReferenceServiceDefaultsFromProjectsResponse> ReferenceServiceDefaultsFromProjects => _ReferenceServiceDefaultsFromProjects;
    [NotNull] public IRdEndpoint<InsertProjectsIntoAppHostFileRequest, Unit> InsertProjectsIntoAppHostFile => _InsertProjectsIntoAppHostFile;
    [NotNull] public IRdEndpoint<InsertDefaultMethodsIntoProjectProgramFileRequest, Unit> InsertDefaultMethodsIntoProjectProgramFile => _InsertDefaultMethodsIntoProjectProgramFile;
    [NotNull] public IRdCall<StartAspireHostRequest, StartAspireHostResponse> StartAspireHost => _StartAspireHost;
    [NotNull] public IRdCall<StopAspireHostRequest, Unit> StopAspireHost => _StopAspireHost;
    [NotNull] public void UnitTestRunCancelled(string value) => _UnitTestRunCancelled.Fire(value);
    
    //private fields
    [NotNull] private readonly RdCall<string, string> _GetProjectOutputType;
    [NotNull] private readonly RdCall<ReferenceProjectsFromAppHostRequest, ReferenceProjectsFromAppHostResponse> _ReferenceProjectsFromAppHost;
    [NotNull] private readonly RdCall<ReferenceServiceDefaultsFromProjectsRequest, ReferenceServiceDefaultsFromProjectsResponse> _ReferenceServiceDefaultsFromProjects;
    [NotNull] private readonly RdCall<InsertProjectsIntoAppHostFileRequest, Unit> _InsertProjectsIntoAppHostFile;
    [NotNull] private readonly RdCall<InsertDefaultMethodsIntoProjectProgramFileRequest, Unit> _InsertDefaultMethodsIntoProjectProgramFile;
    [NotNull] private readonly RdCall<StartAspireHostRequest, StartAspireHostResponse> _StartAspireHost;
    [NotNull] private readonly RdCall<StopAspireHostRequest, Unit> _StopAspireHost;
    [NotNull] private readonly RdSignal<string> _UnitTestRunCancelled;
    
    //primary constructor
    private AspirePluginModel(
      [NotNull] RdCall<string, string> getProjectOutputType,
      [NotNull] RdCall<ReferenceProjectsFromAppHostRequest, ReferenceProjectsFromAppHostResponse> referenceProjectsFromAppHost,
      [NotNull] RdCall<ReferenceServiceDefaultsFromProjectsRequest, ReferenceServiceDefaultsFromProjectsResponse> referenceServiceDefaultsFromProjects,
      [NotNull] RdCall<InsertProjectsIntoAppHostFileRequest, Unit> insertProjectsIntoAppHostFile,
      [NotNull] RdCall<InsertDefaultMethodsIntoProjectProgramFileRequest, Unit> insertDefaultMethodsIntoProjectProgramFile,
      [NotNull] RdCall<StartAspireHostRequest, StartAspireHostResponse> startAspireHost,
      [NotNull] RdCall<StopAspireHostRequest, Unit> stopAspireHost,
      [NotNull] RdSignal<string> unitTestRunCancelled
    )
    {
      if (getProjectOutputType == null) throw new ArgumentNullException("getProjectOutputType");
      if (referenceProjectsFromAppHost == null) throw new ArgumentNullException("referenceProjectsFromAppHost");
      if (referenceServiceDefaultsFromProjects == null) throw new ArgumentNullException("referenceServiceDefaultsFromProjects");
      if (insertProjectsIntoAppHostFile == null) throw new ArgumentNullException("insertProjectsIntoAppHostFile");
      if (insertDefaultMethodsIntoProjectProgramFile == null) throw new ArgumentNullException("insertDefaultMethodsIntoProjectProgramFile");
      if (startAspireHost == null) throw new ArgumentNullException("startAspireHost");
      if (stopAspireHost == null) throw new ArgumentNullException("stopAspireHost");
      if (unitTestRunCancelled == null) throw new ArgumentNullException("unitTestRunCancelled");
      
      _GetProjectOutputType = getProjectOutputType;
      _ReferenceProjectsFromAppHost = referenceProjectsFromAppHost;
      _ReferenceServiceDefaultsFromProjects = referenceServiceDefaultsFromProjects;
      _InsertProjectsIntoAppHostFile = insertProjectsIntoAppHostFile;
      _InsertDefaultMethodsIntoProjectProgramFile = insertDefaultMethodsIntoProjectProgramFile;
      _StartAspireHost = startAspireHost;
      _StopAspireHost = stopAspireHost;
      _UnitTestRunCancelled = unitTestRunCancelled;
      _StartAspireHost.Async = true;
      _StopAspireHost.Async = true;
      _UnitTestRunCancelled.Async = true;
      _GetProjectOutputType.ValueCanBeNull = true;
      _ReferenceProjectsFromAppHost.ValueCanBeNull = true;
      _ReferenceServiceDefaultsFromProjects.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("getProjectOutputType", _GetProjectOutputType));
      BindableChildren.Add(new KeyValuePair<string, object>("referenceProjectsFromAppHost", _ReferenceProjectsFromAppHost));
      BindableChildren.Add(new KeyValuePair<string, object>("referenceServiceDefaultsFromProjects", _ReferenceServiceDefaultsFromProjects));
      BindableChildren.Add(new KeyValuePair<string, object>("insertProjectsIntoAppHostFile", _InsertProjectsIntoAppHostFile));
      BindableChildren.Add(new KeyValuePair<string, object>("insertDefaultMethodsIntoProjectProgramFile", _InsertDefaultMethodsIntoProjectProgramFile));
      BindableChildren.Add(new KeyValuePair<string, object>("startAspireHost", _StartAspireHost));
      BindableChildren.Add(new KeyValuePair<string, object>("stopAspireHost", _StopAspireHost));
      BindableChildren.Add(new KeyValuePair<string, object>("unitTestRunCancelled", _UnitTestRunCancelled));
    }
    //secondary constructor
    internal AspirePluginModel (
    ) : this (
      new RdCall<string, string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ReadStringNullable, WriteStringNullable),
      new RdCall<ReferenceProjectsFromAppHostRequest, ReferenceProjectsFromAppHostResponse>(ReferenceProjectsFromAppHostRequest.Read, ReferenceProjectsFromAppHostRequest.Write, ReadReferenceProjectsFromAppHostResponseNullable, WriteReferenceProjectsFromAppHostResponseNullable),
      new RdCall<ReferenceServiceDefaultsFromProjectsRequest, ReferenceServiceDefaultsFromProjectsResponse>(ReferenceServiceDefaultsFromProjectsRequest.Read, ReferenceServiceDefaultsFromProjectsRequest.Write, ReadReferenceServiceDefaultsFromProjectsResponseNullable, WriteReferenceServiceDefaultsFromProjectsResponseNullable),
      new RdCall<InsertProjectsIntoAppHostFileRequest, Unit>(InsertProjectsIntoAppHostFileRequest.Read, InsertProjectsIntoAppHostFileRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<InsertDefaultMethodsIntoProjectProgramFileRequest, Unit>(InsertDefaultMethodsIntoProjectProgramFileRequest.Read, InsertDefaultMethodsIntoProjectProgramFileRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<StartAspireHostRequest, StartAspireHostResponse>(StartAspireHostRequest.Read, StartAspireHostRequest.Write, StartAspireHostResponse.Read, StartAspireHostResponse.Write),
      new RdCall<StopAspireHostRequest, Unit>(StopAspireHostRequest.Read, StopAspireHostRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<ReferenceProjectsFromAppHostResponse> ReadReferenceProjectsFromAppHostResponseNullable = ReferenceProjectsFromAppHostResponse.Read.NullableClass();
    public static CtxReadDelegate<ReferenceServiceDefaultsFromProjectsResponse> ReadReferenceServiceDefaultsFromProjectsResponseNullable = ReferenceServiceDefaultsFromProjectsResponse.Read.NullableClass();
    
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<ReferenceProjectsFromAppHostResponse> WriteReferenceProjectsFromAppHostResponseNullable = ReferenceProjectsFromAppHostResponse.Write.NullableClass();
    public static  CtxWriteDelegate<ReferenceServiceDefaultsFromProjectsResponse> WriteReferenceServiceDefaultsFromProjectsResponseNullable = ReferenceServiceDefaultsFromProjectsResponse.Write.NullableClass();
    
    protected override long SerializationHash => 564651792104130552L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspirePluginModel (");
      using (printer.IndentCookie()) {
        printer.Print("getProjectOutputType = "); _GetProjectOutputType.PrintEx(printer); printer.Println();
        printer.Print("referenceProjectsFromAppHost = "); _ReferenceProjectsFromAppHost.PrintEx(printer); printer.Println();
        printer.Print("referenceServiceDefaultsFromProjects = "); _ReferenceServiceDefaultsFromProjects.PrintEx(printer); printer.Println();
        printer.Print("insertProjectsIntoAppHostFile = "); _InsertProjectsIntoAppHostFile.PrintEx(printer); printer.Println();
        printer.Print("insertDefaultMethodsIntoProjectProgramFile = "); _InsertDefaultMethodsIntoProjectProgramFile.PrintEx(printer); printer.Println();
        printer.Print("startAspireHost = "); _StartAspireHost.PrintEx(printer); printer.Println();
        printer.Print("stopAspireHost = "); _StopAspireHost.PrintEx(printer); printer.Println();
        printer.Print("unitTestRunCancelled = "); _UnitTestRunCancelled.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionAspirePluginModelEx
   {
    public static AspirePluginModel GetAspirePluginModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("aspirePluginModel", () => new AspirePluginModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:44</p>
  /// </summary>
  public sealed class AspireHostEnvironmentVariable : IPrintable, IEquatable<AspireHostEnvironmentVariable>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public AspireHostEnvironmentVariable(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<AspireHostEnvironmentVariable> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new AspireHostEnvironmentVariable(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<AspireHostEnvironmentVariable> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((AspireHostEnvironmentVariable) obj);
    }
    public bool Equals(AspireHostEnvironmentVariable other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("AspireHostEnvironmentVariable (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:34</p>
  /// </summary>
  public sealed class InsertDefaultMethodsIntoProjectProgramFileRequest : IPrintable, IEquatable<InsertDefaultMethodsIntoProjectProgramFileRequest>
  {
    //fields
    //public fields
    [NotNull] public string ProjectFilePath {get; private set;}
    
    //private fields
    //primary constructor
    public InsertDefaultMethodsIntoProjectProgramFileRequest(
      [NotNull] string projectFilePath
    )
    {
      if (projectFilePath == null) throw new ArgumentNullException("projectFilePath");
      
      ProjectFilePath = projectFilePath;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectFilePath)
    {
      projectFilePath = ProjectFilePath;
    }
    //statics
    
    public static CtxReadDelegate<InsertDefaultMethodsIntoProjectProgramFileRequest> Read = (ctx, reader) => 
    {
      var projectFilePath = reader.ReadString();
      var _result = new InsertDefaultMethodsIntoProjectProgramFileRequest(projectFilePath);
      return _result;
    };
    
    public static CtxWriteDelegate<InsertDefaultMethodsIntoProjectProgramFileRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectFilePath);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((InsertDefaultMethodsIntoProjectProgramFileRequest) obj);
    }
    public bool Equals(InsertDefaultMethodsIntoProjectProgramFileRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectFilePath == other.ProjectFilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectFilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("InsertDefaultMethodsIntoProjectProgramFileRequest (");
      using (printer.IndentCookie()) {
        printer.Print("projectFilePath = "); ProjectFilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:29</p>
  /// </summary>
  public sealed class InsertProjectsIntoAppHostFileRequest : IPrintable, IEquatable<InsertProjectsIntoAppHostFileRequest>
  {
    //fields
    //public fields
    [NotNull] public string HostProjectFilePath {get; private set;}
    [NotNull] public List<string> ProjectFilePaths {get; private set;}
    
    //private fields
    //primary constructor
    public InsertProjectsIntoAppHostFileRequest(
      [NotNull] string hostProjectFilePath,
      [NotNull] List<string> projectFilePaths
    )
    {
      if (hostProjectFilePath == null) throw new ArgumentNullException("hostProjectFilePath");
      if (projectFilePaths == null) throw new ArgumentNullException("projectFilePaths");
      
      HostProjectFilePath = hostProjectFilePath;
      ProjectFilePaths = projectFilePaths;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string hostProjectFilePath, [NotNull] out List<string> projectFilePaths)
    {
      hostProjectFilePath = HostProjectFilePath;
      projectFilePaths = ProjectFilePaths;
    }
    //statics
    
    public static CtxReadDelegate<InsertProjectsIntoAppHostFileRequest> Read = (ctx, reader) => 
    {
      var hostProjectFilePath = reader.ReadString();
      var projectFilePaths = ReadStringList(ctx, reader);
      var _result = new InsertProjectsIntoAppHostFileRequest(hostProjectFilePath, projectFilePaths);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<InsertProjectsIntoAppHostFileRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.HostProjectFilePath);
      WriteStringList(ctx, writer, value.ProjectFilePaths);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((InsertProjectsIntoAppHostFileRequest) obj);
    }
    public bool Equals(InsertProjectsIntoAppHostFileRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return HostProjectFilePath == other.HostProjectFilePath && ProjectFilePaths.SequenceEqual(other.ProjectFilePaths);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + HostProjectFilePath.GetHashCode();
        hash = hash * 31 + ProjectFilePaths.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("InsertProjectsIntoAppHostFileRequest (");
      using (printer.IndentCookie()) {
        printer.Print("hostProjectFilePath = "); HostProjectFilePath.PrintEx(printer); printer.Println();
        printer.Print("projectFilePaths = "); ProjectFilePaths.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:11</p>
  /// </summary>
  public sealed class ReferenceProjectsFromAppHostRequest : IPrintable, IEquatable<ReferenceProjectsFromAppHostRequest>
  {
    //fields
    //public fields
    [NotNull] public string HostProjectFilePath {get; private set;}
    [NotNull] public List<string> ProjectFilePaths {get; private set;}
    
    //private fields
    //primary constructor
    public ReferenceProjectsFromAppHostRequest(
      [NotNull] string hostProjectFilePath,
      [NotNull] List<string> projectFilePaths
    )
    {
      if (hostProjectFilePath == null) throw new ArgumentNullException("hostProjectFilePath");
      if (projectFilePaths == null) throw new ArgumentNullException("projectFilePaths");
      
      HostProjectFilePath = hostProjectFilePath;
      ProjectFilePaths = projectFilePaths;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string hostProjectFilePath, [NotNull] out List<string> projectFilePaths)
    {
      hostProjectFilePath = HostProjectFilePath;
      projectFilePaths = ProjectFilePaths;
    }
    //statics
    
    public static CtxReadDelegate<ReferenceProjectsFromAppHostRequest> Read = (ctx, reader) => 
    {
      var hostProjectFilePath = reader.ReadString();
      var projectFilePaths = ReadStringList(ctx, reader);
      var _result = new ReferenceProjectsFromAppHostRequest(hostProjectFilePath, projectFilePaths);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<ReferenceProjectsFromAppHostRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.HostProjectFilePath);
      WriteStringList(ctx, writer, value.ProjectFilePaths);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ReferenceProjectsFromAppHostRequest) obj);
    }
    public bool Equals(ReferenceProjectsFromAppHostRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return HostProjectFilePath == other.HostProjectFilePath && ProjectFilePaths.SequenceEqual(other.ProjectFilePaths);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + HostProjectFilePath.GetHashCode();
        hash = hash * 31 + ProjectFilePaths.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ReferenceProjectsFromAppHostRequest (");
      using (printer.IndentCookie()) {
        printer.Print("hostProjectFilePath = "); HostProjectFilePath.PrintEx(printer); printer.Println();
        printer.Print("projectFilePaths = "); ProjectFilePaths.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:16</p>
  /// </summary>
  public sealed class ReferenceProjectsFromAppHostResponse : IPrintable, IEquatable<ReferenceProjectsFromAppHostResponse>
  {
    //fields
    //public fields
    [NotNull] public List<string> ReferencedProjectFilePaths {get; private set;}
    
    //private fields
    //primary constructor
    public ReferenceProjectsFromAppHostResponse(
      [NotNull] List<string> referencedProjectFilePaths
    )
    {
      if (referencedProjectFilePaths == null) throw new ArgumentNullException("referencedProjectFilePaths");
      
      ReferencedProjectFilePaths = referencedProjectFilePaths;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<string> referencedProjectFilePaths)
    {
      referencedProjectFilePaths = ReferencedProjectFilePaths;
    }
    //statics
    
    public static CtxReadDelegate<ReferenceProjectsFromAppHostResponse> Read = (ctx, reader) => 
    {
      var referencedProjectFilePaths = ReadStringList(ctx, reader);
      var _result = new ReferenceProjectsFromAppHostResponse(referencedProjectFilePaths);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<ReferenceProjectsFromAppHostResponse> Write = (ctx, writer, value) => 
    {
      WriteStringList(ctx, writer, value.ReferencedProjectFilePaths);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ReferenceProjectsFromAppHostResponse) obj);
    }
    public bool Equals(ReferenceProjectsFromAppHostResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ReferencedProjectFilePaths.SequenceEqual(other.ReferencedProjectFilePaths);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ReferencedProjectFilePaths.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ReferenceProjectsFromAppHostResponse (");
      using (printer.IndentCookie()) {
        printer.Print("referencedProjectFilePaths = "); ReferencedProjectFilePaths.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:20</p>
  /// </summary>
  public sealed class ReferenceServiceDefaultsFromProjectsRequest : IPrintable, IEquatable<ReferenceServiceDefaultsFromProjectsRequest>
  {
    //fields
    //public fields
    [NotNull] public string SharedProjectFilePath {get; private set;}
    [NotNull] public List<string> ProjectFilePaths {get; private set;}
    
    //private fields
    //primary constructor
    public ReferenceServiceDefaultsFromProjectsRequest(
      [NotNull] string sharedProjectFilePath,
      [NotNull] List<string> projectFilePaths
    )
    {
      if (sharedProjectFilePath == null) throw new ArgumentNullException("sharedProjectFilePath");
      if (projectFilePaths == null) throw new ArgumentNullException("projectFilePaths");
      
      SharedProjectFilePath = sharedProjectFilePath;
      ProjectFilePaths = projectFilePaths;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string sharedProjectFilePath, [NotNull] out List<string> projectFilePaths)
    {
      sharedProjectFilePath = SharedProjectFilePath;
      projectFilePaths = ProjectFilePaths;
    }
    //statics
    
    public static CtxReadDelegate<ReferenceServiceDefaultsFromProjectsRequest> Read = (ctx, reader) => 
    {
      var sharedProjectFilePath = reader.ReadString();
      var projectFilePaths = ReadStringList(ctx, reader);
      var _result = new ReferenceServiceDefaultsFromProjectsRequest(sharedProjectFilePath, projectFilePaths);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<ReferenceServiceDefaultsFromProjectsRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.SharedProjectFilePath);
      WriteStringList(ctx, writer, value.ProjectFilePaths);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ReferenceServiceDefaultsFromProjectsRequest) obj);
    }
    public bool Equals(ReferenceServiceDefaultsFromProjectsRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return SharedProjectFilePath == other.SharedProjectFilePath && ProjectFilePaths.SequenceEqual(other.ProjectFilePaths);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + SharedProjectFilePath.GetHashCode();
        hash = hash * 31 + ProjectFilePaths.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ReferenceServiceDefaultsFromProjectsRequest (");
      using (printer.IndentCookie()) {
        printer.Print("sharedProjectFilePath = "); SharedProjectFilePath.PrintEx(printer); printer.Println();
        printer.Print("projectFilePaths = "); ProjectFilePaths.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:25</p>
  /// </summary>
  public sealed class ReferenceServiceDefaultsFromProjectsResponse : IPrintable, IEquatable<ReferenceServiceDefaultsFromProjectsResponse>
  {
    //fields
    //public fields
    [NotNull] public List<string> ProjectFilePathsWithReference {get; private set;}
    
    //private fields
    //primary constructor
    public ReferenceServiceDefaultsFromProjectsResponse(
      [NotNull] List<string> projectFilePathsWithReference
    )
    {
      if (projectFilePathsWithReference == null) throw new ArgumentNullException("projectFilePathsWithReference");
      
      ProjectFilePathsWithReference = projectFilePathsWithReference;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<string> projectFilePathsWithReference)
    {
      projectFilePathsWithReference = ProjectFilePathsWithReference;
    }
    //statics
    
    public static CtxReadDelegate<ReferenceServiceDefaultsFromProjectsResponse> Read = (ctx, reader) => 
    {
      var projectFilePathsWithReference = ReadStringList(ctx, reader);
      var _result = new ReferenceServiceDefaultsFromProjectsResponse(projectFilePathsWithReference);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<ReferenceServiceDefaultsFromProjectsResponse> Write = (ctx, writer, value) => 
    {
      WriteStringList(ctx, writer, value.ProjectFilePathsWithReference);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ReferenceServiceDefaultsFromProjectsResponse) obj);
    }
    public bool Equals(ReferenceServiceDefaultsFromProjectsResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectFilePathsWithReference.SequenceEqual(other.ProjectFilePathsWithReference);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectFilePathsWithReference.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ReferenceServiceDefaultsFromProjectsResponse (");
      using (printer.IndentCookie()) {
        printer.Print("projectFilePathsWithReference = "); ProjectFilePathsWithReference.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:38</p>
  /// </summary>
  public sealed class StartAspireHostRequest : IPrintable, IEquatable<StartAspireHostRequest>
  {
    //fields
    //public fields
    [NotNull] public string UnitTestRunId {get; private set;}
    [NotNull] public string AspireHostProjectPath {get; private set;}
    public bool UnderDebugger {get; private set;}
    
    //private fields
    //primary constructor
    public StartAspireHostRequest(
      [NotNull] string unitTestRunId,
      [NotNull] string aspireHostProjectPath,
      bool underDebugger
    )
    {
      if (unitTestRunId == null) throw new ArgumentNullException("unitTestRunId");
      if (aspireHostProjectPath == null) throw new ArgumentNullException("aspireHostProjectPath");
      
      UnitTestRunId = unitTestRunId;
      AspireHostProjectPath = aspireHostProjectPath;
      UnderDebugger = underDebugger;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string unitTestRunId, [NotNull] out string aspireHostProjectPath, out bool underDebugger)
    {
      unitTestRunId = UnitTestRunId;
      aspireHostProjectPath = AspireHostProjectPath;
      underDebugger = UnderDebugger;
    }
    //statics
    
    public static CtxReadDelegate<StartAspireHostRequest> Read = (ctx, reader) => 
    {
      var unitTestRunId = reader.ReadString();
      var aspireHostProjectPath = reader.ReadString();
      var underDebugger = reader.ReadBool();
      var _result = new StartAspireHostRequest(unitTestRunId, aspireHostProjectPath, underDebugger);
      return _result;
    };
    
    public static CtxWriteDelegate<StartAspireHostRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.UnitTestRunId);
      writer.Write(value.AspireHostProjectPath);
      writer.Write(value.UnderDebugger);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((StartAspireHostRequest) obj);
    }
    public bool Equals(StartAspireHostRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return UnitTestRunId == other.UnitTestRunId && AspireHostProjectPath == other.AspireHostProjectPath && UnderDebugger == other.UnderDebugger;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + UnitTestRunId.GetHashCode();
        hash = hash * 31 + AspireHostProjectPath.GetHashCode();
        hash = hash * 31 + UnderDebugger.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("StartAspireHostRequest (");
      using (printer.IndentCookie()) {
        printer.Print("unitTestRunId = "); UnitTestRunId.PrintEx(printer); printer.Println();
        printer.Print("aspireHostProjectPath = "); AspireHostProjectPath.PrintEx(printer); printer.Println();
        printer.Print("underDebugger = "); UnderDebugger.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:49</p>
  /// </summary>
  public sealed class StartAspireHostResponse : IPrintable, IEquatable<StartAspireHostResponse>
  {
    //fields
    //public fields
    [NotNull] public AspireHostEnvironmentVariable[] EnvironmentVariables {get; private set;}
    
    //private fields
    //primary constructor
    public StartAspireHostResponse(
      [NotNull] AspireHostEnvironmentVariable[] environmentVariables
    )
    {
      if (environmentVariables == null) throw new ArgumentNullException("environmentVariables");
      
      EnvironmentVariables = environmentVariables;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out AspireHostEnvironmentVariable[] environmentVariables)
    {
      environmentVariables = EnvironmentVariables;
    }
    //statics
    
    public static CtxReadDelegate<StartAspireHostResponse> Read = (ctx, reader) => 
    {
      var environmentVariables = ReadAspireHostEnvironmentVariableArray(ctx, reader);
      var _result = new StartAspireHostResponse(environmentVariables);
      return _result;
    };
    public static CtxReadDelegate<AspireHostEnvironmentVariable[]> ReadAspireHostEnvironmentVariableArray = AspireHostEnvironmentVariable.Read.Array();
    
    public static CtxWriteDelegate<StartAspireHostResponse> Write = (ctx, writer, value) => 
    {
      WriteAspireHostEnvironmentVariableArray(ctx, writer, value.EnvironmentVariables);
    };
    public static  CtxWriteDelegate<AspireHostEnvironmentVariable[]> WriteAspireHostEnvironmentVariableArray = AspireHostEnvironmentVariable.Write.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((StartAspireHostResponse) obj);
    }
    public bool Equals(StartAspireHostResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return EnvironmentVariables.SequenceEqual(other.EnvironmentVariables);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + EnvironmentVariables.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("StartAspireHostResponse (");
      using (printer.IndentCookie()) {
        printer.Print("environmentVariables = "); EnvironmentVariables.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:53</p>
  /// </summary>
  public sealed class StopAspireHostRequest : IPrintable, IEquatable<StopAspireHostRequest>
  {
    //fields
    //public fields
    [NotNull] public string UnitTestRunId {get; private set;}
    
    //private fields
    //primary constructor
    public StopAspireHostRequest(
      [NotNull] string unitTestRunId
    )
    {
      if (unitTestRunId == null) throw new ArgumentNullException("unitTestRunId");
      
      UnitTestRunId = unitTestRunId;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string unitTestRunId)
    {
      unitTestRunId = UnitTestRunId;
    }
    //statics
    
    public static CtxReadDelegate<StopAspireHostRequest> Read = (ctx, reader) => 
    {
      var unitTestRunId = reader.ReadString();
      var _result = new StopAspireHostRequest(unitTestRunId);
      return _result;
    };
    
    public static CtxWriteDelegate<StopAspireHostRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.UnitTestRunId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((StopAspireHostRequest) obj);
    }
    public bool Equals(StopAspireHostRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return UnitTestRunId == other.UnitTestRunId;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + UnitTestRunId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("StopAspireHostRequest (");
      using (printer.IndentCookie()) {
        printer.Print("unitTestRunId = "); UnitTestRunId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
