package com.jetbrains.rider.aspire.run

import com.intellij.execution.RunManager
import com.intellij.execution.RunnerAndConfigurationSettings
import com.intellij.execution.configurations.ConfigurationTypeBase
import com.intellij.openapi.project.Project
import com.jetbrains.rd.util.lifetime.Lifetime
import com.jetbrains.rider.aspire.AspireIcons
import com.jetbrains.rider.model.RunnableProject
import com.jetbrains.rider.model.RunnableProjectKind
import com.jetbrains.rider.run.AutoGeneratedRunConfigurationManager
import com.jetbrains.rider.run.configurations.IRunConfigurationWithDefault
import com.jetbrains.rider.run.configurations.IRunnableProjectConfigurationType
import com.jetbrains.rider.run.configurations.RunConfigurationHelper.hasConfigurationForNameAndTypeId
import com.jetbrains.rider.run.configurations.launchSettings.LaunchSettingsJsonService

class AspireHostConfigurationType : ConfigurationTypeBase(
    ID,
    "Aspire Host",
    "Aspire Host configuration",
    AspireIcons.RunConfig
), IRunnableProjectConfigurationType, IRunConfigurationWithDefault {
    companion object {
        const val ID = "AspireHostConfiguration"
    }

    val factory = AspireHostConfigurationFactory(this)

    init {
        addFactory(factory)
    }

    override fun isApplicable(kind: RunnableProjectKind) = kind == AspireRunnableProjectKinds.AspireHost

    override suspend fun tryCreateDefault(
        project: Project,
        lifetime: Lifetime,
        projects: List<RunnableProject>,
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        runManager: RunManager
    ): List<Pair<RunnableProject, RunnerAndConfigurationSettings>> {
        val aspireHostProjects = projects.filter { it.kind == AspireRunnableProjectKinds.AspireHost }
        if (aspireHostProjects.isEmpty()) return emptyList()

        val result = mutableListOf<Pair<RunnableProject, RunnerAndConfigurationSettings>>()

        for (runnableProject in aspireHostProjects) {
            val profiles = LaunchSettingsJsonService.getInstance(project).loadLaunchSettingsSuspend(
                LaunchSettingsJsonService.getLaunchSettingsFileForProject(runnableProject) ?: continue
            )?.profiles ?: continue
            for (profile in profiles) {
                if (!profile.value.commandName.equals("Project", true))
                    continue

                if (hasRunConfigurationEverBeenGenerated(
                        autoGeneratedRunConfigurationManager,
                        runnableProject.projectFilePath,
                        profile.key
                    )
                ) continue

                val configurationName =
                    if (runnableProject.name == profile.key) profile.key
                    else "${runnableProject.name}: ${profile.key}"

                if (runManager.hasConfigurationForNameAndTypeId(configurationName, ID) ||
                    runManager.hasConfigurationForNameAndTypeId(runnableProject.name, ID)
                )
                    continue

                val configuration = generateConfigurationForProfile(
                    configurationName,
                    runnableProject,
                    profile.key,
                    runManager,
                    project
                )

                runManager.addConfiguration(configuration)
                markProjectAsAutoGenerated(
                    autoGeneratedRunConfigurationManager,
                    runnableProject.projectFilePath,
                    profile.key
                )
                result.add(runnableProject to configuration)
            }
        }

        return result
    }

    private fun hasRunConfigurationEverBeenGenerated(
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        projectFilePath: String,
        profileName: String
    ) = autoGeneratedRunConfigurationManager.hasRunConfigurationEverBeenGenerated(
        projectFilePath,
        mapOf(
            "aspireProfileName" to profileName,
        )
    )

    private fun markProjectAsAutoGenerated(
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        projectFilePath: String,
        profileName: String
    ) {
        autoGeneratedRunConfigurationManager.markProjectAsAutoGenerated(
            projectFilePath,
            mapOf(
                "aspireProfileName" to profileName,
            )
        )
    }

    private suspend fun generateConfigurationForProfile(
        name: String,
        runnableProject: RunnableProject,
        profile: String,
        runManager: RunManager,
        project: Project
    ): RunnerAndConfigurationSettings {
        val settings = runManager.createConfiguration(name, factory).apply {
            isActivateToolWindowBeforeRun = false
            isFocusToolWindowBeforeRun = false
        }
        (settings.configuration as? AspireHostConfiguration)?.parameters?.apply {
            projectFilePath = runnableProject.projectFilePath
            profileName = profile
            val projectOutput = runnableProject.projectOutputs.firstOrNull()
            projectTfm = projectOutput?.tfm?.presentableName ?: ""
            val launchProfile = FunctionLaunchProfilesService
                .getInstance(project)
                .getLaunchProfileByName(runnableProject, profile)
            if (launchProfile != null) {
                arguments = getArguments(launchProfile.content, projectOutput)
                trackArguments = true
                workingDirectory = getWorkingDirectory(launchProfile.content, projectOutput)
                trackWorkingDirectory = true
                envs = getEnvironmentVariables(launchProfile.name, launchProfile.content)
                trackEnvs = true
                startBrowserParameters.apply {
                    url = getApplicationUrl(launchProfile.content)
                    startAfterLaunch = launchProfile.content.launchBrowser
                }
                trackUrl = true
            }
        }

        return settings
    }

    override fun getHelpTopic() = "me.rafaelldi.aspire.run-config"
}